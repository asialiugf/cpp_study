#include <stdio.h>
#include <stdlib.h>
#include <sys/mman.h>
#include <unistd.h>

#include <iostream>

#include "shm_common.h"
#include "timestamp.h"

#define random(x) (rand() % x)

#define BUF_SIZE 10000
struct tick {
    int      num;
    uint64_t before;
    double   h;
    double   o;
    double   c;
    double   l;
    char     a[ 100 ];
};

int main(int argc, char **argv) {
    char *p_map;
    tick *tt = shmmap<tick>("/WFMPMC.shm");
    if (tt == nullptr)
        return 1;

    /* 匿名映射,创建一块内存供父子进程通信 */
    p_map = (char *)mmap(NULL, BUF_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED | MAP_ANONYMOUS, -1, 0);

    if (fork() == 0) {
        sleep(1);
        printf("child got a message: %s\n", p_map);
        sprintf(p_map, "%s", "hi, dad, this is son");

        tick *mm = (tick *)p_map;
        mm->num  = 0;
        while (1) {
            sleep(2);
            mm->h = (double)random(1000);
            mm->o = (double)random(1000);
            mm->c = (double)random(1000);
            mm->l = (double)random(1000);

            std::cout << "sun: num:" << mm->num << "    " << mm->h << " " << mm->o << " " << mm->c
                      << " " << mm->l << std::endl;

            mm->num    = mm->num + 1;
            mm->before = rdtsc();
        }
        munmap(p_map, BUF_SIZE);  //实际上，进程终止时，会自动解除映射。
        exit(0);
    }

    // sprintf(p_map, "%s", "hi, this is father");
    sleep(2);
    // printf("parent got a message: %s\n", p_map);

    int      t = -1;
    uint64_t latency;
    tick *   gtick = (tick *)p_map;
    while (1) {
        std::cout << "f:" << gtick->num << " " << t << std::endl;
        sleep(1);
        if (gtick->num > t) {
            latency = rdtsc() - gtick->before;
            // printf("parent got a message: %d ", gtick->num);
            std::cout << "latency: " << latency << " cycles" << std::endl;
            std::cout << "father: num:" << gtick->num << " t:" << t << " " << gtick->h << " "
                      << gtick->l << std::endl;
            t = gtick->num;
        }
    }

    return 0;
}
